/**
 * @file Firestore Security Rules for BizFlow Application
 *
 * @core_philosophy This ruleset enforces a role-based access control model for a board game application.
 *  Access to games, players, and transactions is controlled based on user roles within a specific game.
 *  Games can only be created by authenticated users. Players and transactions are scoped to their parent game.
 *
 * @data_structure
 *  - /games/{gameId}: Stores game instances.
 *  - /games/{gameId}/players/{playerId}: Stores player data for a specific game.
 *  - /games/{gameId}/transactions/{transactionId}: Stores transaction data for a specific game.
 *
 * @key_security_decisions
 *  - Only authenticated users can create games.
 *  - Listing all games is disallowed.
 *  - Players and Transactions are scoped to the game and should only be accessible by the players or authorized game managers.
 *  - Uses denormalization for authorization: gameId is included in both players and transactions documents.
 *
 * @denormalization_for_authorization
 *  - The `gameId` is included in the `players` and `transactions` documents. This avoids the need for `get()` calls to the parent `games` document, improving performance and security.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages access to the games collection.
     * @path /games/{gameId}
     * @allow (create) - Authenticated user can create a game
     * @deny (get) - Listing all games is disallowed.
     * @deny (update) - Games cannot be updated by the client.
     * @deny (delete) - Games cannot be deleted by the client.
     * @principle Owner-only access for game creation.
     */
    match /games/{gameId} {
      allow get: if false;
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Manages access to the players subcollection for a specific game.
     * @path /games/{gameId}/players/{playerId}
     * @allow (get) Authenticated user can retrieve a specific player's data within a game if they are the owner.
     * @allow (list) Authenticated user can list players if they are the game owner.
     * @allow (create) Authenticated user can create their player profile in a game
     * @deny (update) Non-owner cannot update a player's data.
     * @deny (delete) Non-owner cannot delete a player's data.
     * @principle Enforces player-ownership for data access within a game.
     */
    match /games/{gameId}/players/{playerId} {
      allow get: if isOwner(playerId);
      allow list: if false;
      allow create: if isOwner(playerId);
      allow update: if isExistingOwner(playerId);
      allow delete: if isExistingOwner(playerId);
    }

    /**
     * @description Manages access to the transactions subcollection for a specific game.
     * @path /games/{gameId}/transactions/{transactionId}
     * @allow (get) Authenticated user can retrieve transaction data within a game if they are the owner.
     * @allow (list) Authenticated user can list transactions if they are the game owner.
     * @allow (create) Authenticated user can create a transaction profile in a game
     * @deny (update) Non-owner cannot update a transaction's data.
     * @deny (delete) Non-owner cannot delete a transaction's data.
     * @principle Enforces player-ownership for data access within a game.
     */
    match /games/{gameId}/transactions/{transactionId} {
      allow get: if false;
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    // --- Helper functions ---

    /**
     * @description Checks if the user is signed in.
     * @return {bool} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the requesting user is the owner of the resource.
     * @param {string} userId The user ID to compare against the request's auth UID.
     * @return {bool} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the requesting user is the owner of the resource, and the resource exists.
     * @param {string} userId The user ID to compare against the request's auth UID.
     * @return {bool} True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
  }
}