/**
 * @fileOverview Firestore Security Rules for the BizFlow application.
 *
 * Core Philosophy:
 * This ruleset enforces a role-based access control model, combined with ownership, to protect game data.
 * Users can only create games, and the game creator (who is also the first player) can perform certain administrative actions, such as starting the game.
 * Data Structure:
 * - /games/{gameId}: Stores game metadata. Anyone can read existing games. Game creator can update the game.
 * - /games/{gameId}/players/{playerId}: Stores player-specific data within a game. Only the player can read or write their own data.
 * - /games/{gameId}/transactions/{transactionId}: Stores transaction data for a specific game. Only players in the game can list transactions, but only the player initiating the transaction can create them.
 *
 * Key Security Decisions:
 * - Players can only modify their own player data within a game.
 * - Only the game creator can update/start the game.
 * - Listing of games is allowed for all users.
 *
 * Denormalization for Authorization:
 * - `gameId` is denormalized into the `players` and `transactions` subcollections to avoid costly `get()` calls and ensure authorization independence.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to the /games/{gameId} collection.
     * @path /games/{gameId}
     * @allow (get, list): Any user can read or list games.
     * @allow (create): Any signed-in user can create a game.
     * @allow (update, delete): Only the game creator can update/delete the game.
     * @deny (create): If the `gameId` does not match the document ID.
     * @principle Allows public read access while restricting write access to the game creator.
     */
    match /games/{gameId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if isGameCreator(gameId);
      allow create: if request.resource.id == gameId;
    }

    /**
     * @description Controls access to the /games/{gameId}/players/{playerId} collection.
     * @path /games/{gameId}/players/{playerId}
     * @allow (get, list): Only the player can read their own player data.
     * @allow (create, update, delete): Only the player can create, update, or delete their own player data.
     * @deny (create): If the `playerId` does not match the authenticated user's UID or if gameId does not match the parent path.
     * @deny (update): If the document does not exist.
     * @principle Enforces document ownership: only the player can manage their own data within the game.
     */
    match /games/{gameId}/players/{playerId} {
      allow get: if isOwner(playerId);
      allow list: if isOwner(gameId);
      allow create: if isOwner(playerId) && request.resource.data.gameId == gameId;
      allow update, delete: if isExistingOwner(playerId);
    }

    /**
     * @description Controls access to the /games/{gameId}/transactions/{transactionId} collection.
     * @path /games/{gameId}/transactions/{transactionId}
     * @allow (get): Any player can read any transaction.
     * @allow (list): Any player can list all transactions for game.
     * @allow (create): Only a player can create new transactions in the game.
     * @allow (update, delete): No one can update or delete a transaction.
     * @deny (create): If `gameId` does not match the parent path.
     * @deny (update, delete): Always deny updating or deleting transactions.
     * @principle Restricts transaction creation to players within the game, disallows modification or deletion.
     */
    match /games/{gameId}/transactions/{transactionId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.gameId == gameId;
      allow update, delete: if false;
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    function isGameCreator(gameId) {
        return get(/databases/$(database)/documents/games/$(gameId)).data.creatorId == request.auth.uid;
    }
  }
}