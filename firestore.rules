/**
 * @file Firestore Security Rules for BizFlow Application
 * @description This ruleset enforces a role-based access control model, focusing on game, player, and transaction data.
 *
 * Data Structure:
 * - /games/{gameId}: Stores game instances. Publicly readable. Only authenticated users can create a game.
 * - /games/{gameId}/players/{playerId}: Stores player data for a specific game. Players can only create their own player document.
 * - /games/{gameId}/transactions/{transactionId}: Stores transaction data for a specific game.
 *
 * Key Security Decisions:
 * - Games are publicly readable to allow open discovery.
 * - Only signed-in users can create games.
 * - Players and transactions are restricted to the game they belong to.
 *
 * Denormalization for Authorization:
 * - The `gameId` is included in both `players` and `transactions` documents to avoid costly `get()` calls and enforce authorization independence.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to the /games collection. Games are publicly readable but creation is restricted to authenticated users.
     * @path /games/{gameId}
     * @allow (get, list): if true (publicly readable)
     * @allow (create): if isSignedIn() (only signed-in users can create)
     * @deny (update, delete): if false (not allowed)
     * @principle Public read, owner-only writes (creation by authenticated user)
     */
    match /games/{gameId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if false;
    }

    /**
     * @description Controls access to the /games/{gameId}/players collection. Player documents can only be created by the authenticated user that owns the player ID.
     * @path /games/{gameId}/players/{playerId}
     * @allow (get, list): if isOwner(playerId)
     * @allow (create): if isOwner(playerId)
     * @deny (update, delete): if false (not allowed)
     * @principle Enforces document ownership for writes
     */
    match /games/{gameId}/players/{playerId} {
      allow get, list: if isOwner(playerId);
      allow create: if isOwner(playerId);
      allow update, delete: if false;
    }

    /**
     * @description Controls access to the /games/{gameId}/transactions collection.
     * @path /games/{gameId}/transactions/{transactionId}
     * @allow (get, list): if false (not allowed)
     * @deny (create, update, delete): if false (not allowed)
     * @principle Enforces document ownership for writes
     */
    match /games/{gameId}/transactions/{transactionId} {
      allow get, list: if false;
      allow create, update, delete: if false;
    }

    // Helper function to determine if the user is signed in.
    function isSignedIn() {
      return request.auth != null;
    }

    // Helper function to determine if the user is the owner of the document.
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
  }
}