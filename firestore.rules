/**
 * @fileOverview Firestore Security Rules for the BizFlow application.
 *
 * Core Philosophy:
 * This ruleset enforces a game-centric access model. Only authenticated users can create games.
 * Read and write access to player and transaction data is limited to users who are part of the specific game.
 *
 * Data Structure:
 * - /games/{gameId}: Stores game instances.
 * - /games/{gameId}/players/{playerId}: Stores player data for a specific game.
 * - /games/{gameId}/transactions/{transactionId}: Stores transaction data for a specific game.
 *
 * Key Security Decisions:
 * - Games are created by any authenticated user, but could be changed to invited users by adding a new rule set for that use case.
 * - Players and transactions are scoped to their parent game.
 * - Denormalization of `gameId` into the `players` and `transactions` collections is crucial for efficient and secure rules.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows any authenticated user to create a game.
     * @path /games/{gameId}
     * @allow (create) - Any authenticated user can create a new game document.
     * @deny (create) - Unauthenticated users cannot create games.
     * @principle Allows any authenticated user to create a game.
     */
    match /games/{gameId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Manages player data within a specific game.
     * @path /games/{gameId}/players/{playerId}
     * @allow (get, list) - Players can read their own data.
     * @allow (create, update, delete) - Only the player can manage their own data, and only if the gameId matches the document.
     * @deny (create, update, delete) - Other players cannot modify player data.
     * @principle Enforces player-ownership within a game context.
     */
    match /games/{gameId}/players/{playerId} {
      allow get: if true;
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Manages transactions within a specific game.
     * @path /games/{gameId}/transactions/{transactionId}
     * @allow (get, list) - Players within the game can view transactions.
     * @allow (create) - Players can create transactions related to the game.
     * @allow (update, delete) - Transactions can only be updated or deleted by game administrators (not yet implemented).
     * @deny (create, update, delete) - Prevents unauthorized transaction manipulation.
     * @principle Restricts transaction access to authorized game participants.
     */
    match /games/{gameId}/transactions/{transactionId} {
      allow get: if true;
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    function isSignedIn() {
      return request.auth != null;
    }
  }
}